#include "iostream"
#include "vector"
using namespace std;
    s
   s
  s
 s
 45
float average_list(vector<int> list){           // Het gemiddelde uitrekenen van de een lijst
    float total = list[0];
   float total = list[0];
  float total = list[0];
 float total = list[0];
 total = list[0];
 = list[0];
 list[0];
    for (int x = 1; x < list.size(); ++x){
   for (int x = 1; x < list.size(); ++x){
  for (int x = 1; x < list.size(); ++x){
 for (int x = 1; x < list.size(); ++x){
 (int x = 1; x < list.size(); ++x){
 x = 1; x < list.size(); ++x){
 = 1; x < list.size(); ++x){
 1; x < list.size(); ++x){
 x < list.size(); ++x){
 < list.size(); ++x){
 list.size(); ++x){
 ++x){
        total = total + list[x];            // alles bij elkaar optellen
       total = total + list[x];            // alles bij elkaar optellen
      total = total + list[x];            // alles bij elkaar optellen
     total = total + list[x];            // alles bij elkaar optellen
    total = total + list[x];            // alles bij elkaar optellen
   total = total + list[x];            // alles bij elkaar optellen
  total = total + list[x];            // alles bij elkaar optellen
 total = total + list[x];            // alles bij elkaar optellen
 = total + list[x];            // alles bij elkaar optellen
 total + list[x];            // alles bij elkaar optellen
 + list[x];            // alles bij elkaar optellen
 list[x];            // alles bij elkaar optellen
            // alles bij elkaar optellen
           // alles bij elkaar optellen
          // alles bij elkaar optellen
         // alles bij elkaar optellen
        // alles bij elkaar optellen
       // alles bij elkaar optellen
      // alles bij elkaar optellen
     // alles bij elkaar optellen
    // alles bij elkaar optellen
   // alles bij elkaar optellen
  // alles bij elkaar optellen
 // alles bij elkaar optellen
 alles bij elkaar optellen
 bij elkaar optellen
 elkaar optellen
 optellen
    }
   }
  }
 }
    float av = (total/(0+list.size())*10);       // delen door de lengte om het gemiddelde te krijgen
   float av = (total/(0+list.size())*10);       // delen door de lengte om het gemiddelde te krijgen
  float av = (total/(0+list.size())*10);       // delen door de lengte om het gemiddelde te krijgen
 float av = (total/(0+list.size())*10);       // delen door de lengte om het gemiddelde te krijgen
 av = (total/(0+list.size())*10);       // delen door de lengte om het gemiddelde te krijgen
 = (total/(0+list.size())*10);       // delen door de lengte om het gemiddelde te krijgen
 (total/(0+list.size())*10);       // delen door de lengte om het gemiddelde te krijgen
       // delen door de lengte om het gemiddelde te krijgen
      // delen door de lengte om het gemiddelde te krijgen
     // delen door de lengte om het gemiddelde te krijgen
    // delen door de lengte om het gemiddelde te krijgen
   // delen door de lengte om het gemiddelde te krijgen
  // delen door de lengte om het gemiddelde te krijgen
 // delen door de lengte om het gemiddelde te krijgen
 delen door de lengte om het gemiddelde te krijgen
 door de lengte om het gemiddelde te krijgen
 de lengte om het gemiddelde te krijgen
 lengte om het gemiddelde te krijgen
 om het gemiddelde te krijgen
 het gemiddelde te krijgen
 gemiddelde te krijgen
 te krijgen
 krijgen
    return av;
   return av;
  return av;
 return av;
 av;
}
float average(vector<vector<int>> list){
    vector<int> sum = {};
   vector<int> sum = {};
  vector<int> sum = {};
 vector<int> sum = {};
 sum = {};
 = {};
 {};
    for (int x = 0; x < list.size(); ++x){      // lijsten individualiseren
   for (int x = 0; x < list.size(); ++x){      // lijsten individualiseren
  for (int x = 0; x < list.size(); ++x){      // lijsten individualiseren
 for (int x = 0; x < list.size(); ++x){      // lijsten individualiseren
 (int x = 0; x < list.size(); ++x){      // lijsten individualiseren
 x = 0; x < list.size(); ++x){      // lijsten individualiseren
 = 0; x < list.size(); ++x){      // lijsten individualiseren
 0; x < list.size(); ++x){      // lijsten individualiseren
 x < list.size(); ++x){      // lijsten individualiseren
 < list.size(); ++x){      // lijsten individualiseren
 list.size(); ++x){      // lijsten individualiseren
 ++x){      // lijsten individualiseren
      // lijsten individualiseren
     // lijsten individualiseren
    // lijsten individualiseren
   // lijsten individualiseren
  // lijsten individualiseren
 // lijsten individualiseren
 lijsten individualiseren
 individualiseren
         int av = average_list(list[x]);
        int av = average_list(list[x]);
       int av = average_list(list[x]);
      int av = average_list(list[x]);
     int av = average_list(list[x]);
    int av = average_list(list[x]);
   int av = average_list(list[x]);
  int av = average_list(list[x]);
 int av = average_list(list[x]);
 av = average_list(list[x]);
 = average_list(list[x]);
 average_list(list[x]);
         sum.insert(sum.end(), av);
        sum.insert(sum.end(), av);
       sum.insert(sum.end(), av);
      sum.insert(sum.end(), av);
     sum.insert(sum.end(), av);
    sum.insert(sum.end(), av);
   sum.insert(sum.end(), av);
  sum.insert(sum.end(), av);
 sum.insert(sum.end(), av);
 av);
    }
   }
  }
 }
    int total_av = average_list(sum); // het gemiddelde van alle lijsten optellen
   int total_av = average_list(sum); // het gemiddelde van alle lijsten optellen
  int total_av = average_list(sum); // het gemiddelde van alle lijsten optellen
 int total_av = average_list(sum); // het gemiddelde van alle lijsten optellen
 total_av = average_list(sum); // het gemiddelde van alle lijsten optellen
 = average_list(sum); // het gemiddelde van alle lijsten optellen
 average_list(sum); // het gemiddelde van alle lijsten optellen
 // het gemiddelde van alle lijsten optellen
 het gemiddelde van alle lijsten optellen
 gemiddelde van alle lijsten optellen
 van alle lijsten optellen
 alle lijsten optellen
 lijsten optellen
 optellen
    return total_av;
   return total_av;
  return total_av;
 return total_av;
 total_av;
}
void drie_zes(){
    vector<vector<int>> random = {  {7, 82, 52, 96, 65, 33, 16, 23,18, 3, 6},           // willekeurig gekozen nummers
   vector<vector<int>> random = {  {7, 82, 52, 96, 65, 33, 16, 23,18, 3, 6},           // willekeurig gekozen nummers
  vector<vector<int>> random = {  {7, 82, 52, 96, 65, 33, 16, 23,18, 3, 6},           // willekeurig gekozen nummers
 vector<vector<int>> random = {  {7, 82, 52, 96, 65, 33, 16, 23,18, 3, 6},           // willekeurig gekozen nummers
 random = {  {7, 82, 52, 96, 65, 33, 16, 23,18, 3, 6},           // willekeurig gekozen nummers
 = {  {7, 82, 52, 96, 65, 33, 16, 23,18, 3, 6},           // willekeurig gekozen nummers
 {  {7, 82, 52, 96, 65, 33, 16, 23,18, 3, 6},           // willekeurig gekozen nummers
  {7, 82, 52, 96, 65, 33, 16, 23,18, 3, 6},           // willekeurig gekozen nummers
 {7, 82, 52, 96, 65, 33, 16, 23,18, 3, 6},           // willekeurig gekozen nummers
 82, 52, 96, 65, 33, 16, 23,18, 3, 6},           // willekeurig gekozen nummers
 52, 96, 65, 33, 16, 23,18, 3, 6},           // willekeurig gekozen nummers
 96, 65, 33, 16, 23,18, 3, 6},           // willekeurig gekozen nummers
 65, 33, 16, 23,18, 3, 6},           // willekeurig gekozen nummers
 33, 16, 23,18, 3, 6},           // willekeurig gekozen nummers
 16, 23,18, 3, 6},           // willekeurig gekozen nummers
 23,18, 3, 6},           // willekeurig gekozen nummers
 3, 6},           // willekeurig gekozen nummers
 6},           // willekeurig gekozen nummers
           // willekeurig gekozen nummers
          // willekeurig gekozen nummers
         // willekeurig gekozen nummers
        // willekeurig gekozen nummers
       // willekeurig gekozen nummers
      // willekeurig gekozen nummers
     // willekeurig gekozen nummers
    // willekeurig gekozen nummers
   // willekeurig gekozen nummers
  // willekeurig gekozen nummers
 // willekeurig gekozen nummers
 willekeurig gekozen nummers
 gekozen nummers
 nummers
                                    {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
                                   {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
                                  {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
                                 {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
                                {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
                               {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
                              {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
                             {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
                            {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
                           {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
                          {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
                         {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
                        {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
                       {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
                      {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
                     {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
                    {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
                   {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
                  {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
                 {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
                {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
               {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
              {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
             {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
            {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
           {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
          {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
         {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
        {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
       {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
      {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
     {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
    {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
   {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
  {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
 {14, 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
 63, 67, 29, 85, 51, 6, 5, 89, 45, 1},
 67, 29, 85, 51, 6, 5, 89, 45, 1},
 29, 85, 51, 6, 5, 89, 45, 1},
 85, 51, 6, 5, 89, 45, 1},
 51, 6, 5, 89, 45, 1},
 6, 5, 89, 45, 1},
 5, 89, 45, 1},
 89, 45, 1},
 45, 1},
 1},
                                    {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
                                   {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
                                  {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
                                 {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
                                {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
                               {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
                              {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
                             {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
                            {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
                           {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
                          {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
                         {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
                        {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
                       {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
                      {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
                     {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
                    {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
                   {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
                  {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
                 {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
                {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
               {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
              {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
             {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
            {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
           {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
          {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
         {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
        {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
       {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
      {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
     {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
    {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
   {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
  {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
 {34, 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
 83, 80, 97, 36, 45, 20, 13, 30, 68, 75},
 80, 97, 36, 45, 20, 13, 30, 68, 75},
 97, 36, 45, 20, 13, 30, 68, 75},
 36, 45, 20, 13, 30, 68, 75},
 45, 20, 13, 30, 68, 75},
 20, 13, 30, 68, 75},
 13, 30, 68, 75},
 30, 68, 75},
 68, 75},
 75},
                                    {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
                                   {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
                                  {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
                                 {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
                                {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
                               {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
                              {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
                             {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
                            {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
                           {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
                          {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
                         {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
                        {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
                       {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
                      {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
                     {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
                    {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
                   {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
                  {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
                 {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
                {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
               {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
              {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
             {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
            {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
           {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
          {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
         {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
        {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
       {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
      {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
     {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
    {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
   {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
  {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
 {22, 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
 7, 4, 61, -18, 58, -52, -56,-36, -93, 62},
 4, 61, -18, 58, -52, -56,-36, -93, 62},
 61, -18, 58, -52, -56,-36, -93, 62},
 -18, 58, -52, -56,-36, -93, 62},
 58, -52, -56,-36, -93, 62},
 -52, -56,-36, -93, 62},
 -56,-36, -93, 62},
 -93, 62},
 62},
                                    {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
                                   {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
                                  {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
                                 {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
                                {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
                               {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
                              {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
                             {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
                            {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
                           {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
                          {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
                         {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
                        {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
                       {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
                      {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
                     {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
                    {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
                   {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
                  {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
                 {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
                {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
               {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
              {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
             {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
            {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
           {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
          {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
         {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
        {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
       {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
      {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
     {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
    {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
   {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
  {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
 {-9, -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
 -76, -54, -7, 15, -1, 69, -78, -19, -35, -75}};
 -54, -7, 15, -1, 69, -78, -19, -35, -75}};
 -7, 15, -1, 69, -78, -19, -35, -75}};
 15, -1, 69, -78, -19, -35, -75}};
 -1, 69, -78, -19, -35, -75}};
 69, -78, -19, -35, -75}};
 -78, -19, -35, -75}};
 -19, -35, -75}};
 -35, -75}};
 -75}};
    float ave =  average(random);
   float ave =  average(random);
  float ave =  average(random);
 float ave =  average(random);
 ave =  average(random);
 =  average(random);
  average(random);
 average(random);
    cout << ave << endl;
   cout << ave << endl;
  cout << ave << endl;
 cout << ave << endl;
 << ave << endl;
 ave << endl;
 << endl;
 endl;
    ave = ave/100;
   ave = ave/100;
  ave = ave/100;
 ave = ave/100;
 = ave/100;
 ave/100;
    cout << "average = " << ave;
   cout << "average = " << ave;
  cout << "average = " << ave;
 cout << "average = " << ave;
 << "average = " << ave;
 "average = " << ave;
 = " << ave;
 " << ave;
 << ave;
 ave;
}
